#!/usr/bin/env bash

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

args=${1}
export push_live=0
export is_release_branch=0

type fail > /dev/null 2>&1
if [[ $? -ne 0 ]]
then
    function fail() {
        echo "${1}"
        exit 1
    }
fi

function setup() {
    if [[ "${branch}" == "" ]]
    then
        export branch=`git branch | grep '*'|awk '{print $2}'`
    fi

    if [[ "${branch}" =~ ^release/.* ]]
    then
        export is_release_branch=1;

        if [[ -f ${script_dir}/releases_offline ]]
        then
            export modified_code=''
        else
            modified_code=$(git diff master.. --name-only | grep 'rapid/')
            export modified_code
        fi

        if [[ "${modified_code}" != "" ]]
        then
            echo "Modified code was detected. We will release"
        fi
    fi

    if [[ "${args}" == 'live' ]]
    then
        export push_live=1
    fi

    if [[ ${push_live} -ne 1 ]]
    then
        set_log_uri ''
    fi

    generate_build_version "${commit}" 'true'
    if [[ "${BUILD_VERSION}" == "" ]]
    then
        fail "Failed to generate build version"
    fi

    perl -p -i -e "s/^(version\s+=\s+)'.*'/\1'${BUILD_VERSION}'/" ./pyproject.toml    
    if [[ $? -ne 0 ]]
    then
        fail "Failed to generate build version"
    fi

    if [[ ${push_live} -ne 1 ]]
    then
        setupPythonEnv
    fi

    pip install tox
    if [[ $? -ne 0 ]]
    then
        fail "Failed to install tox"
    fi

    pip install --upgrade pip
    pip install --upgrade setuptools==70.3.0
    pip install -U build

    setRapidAnalyzeTests "code/tests"
    setRapidResultsFiles "XUnit#nosetests.xml"
}

function run_tox_tests() {
    tox -e py39
    if [[ $? -ne 0 ]]
    then
        fail "Failed to run tox tests"
    fi
}



function release_build() {
    if [[ ${is_release_branch} -eq 1 ]]
    then
        if [[ $? -ne 0 ]]
        then
            fail "Failed to set version in version.py"
        fi

        rm -rf ./dist/*

        python -m build --sdist
        if [[ $? -ne 0 ]]
        then
            fail "Failed to build sdist"
        fi

        version=${BUILD_VERSION}
        set_build_version "${version}" "${commit}"

        commit_is_head_of_release ${commit}
        if [[ $? == 1 ]]
        then
            if [[ "${modified_code}" != "" ]]
            then
                # Move The AppSpec and Release Files into s3
                prepare_rapid_release "${version}"
                if [[ $? -ne 0 ]]
                then
                    fail "Unable to prepare rapid release"
                fi

                release_python_internal dist/rapid_framework-${version}.tar.gz
                if [[ $? -ne 0 ]]
                then
                    fail "Internal Release failed"
                fi

                # We set status to pending as we will wait for codedeploy to call back.
                buildStepNotify "rapidbuild" '{"status": "pending", "version": "'${version}'"}'
            else
                buildStepNotify "rapidbuild"
                buildStepNotify 'deploypackage'
            fi
        fi
    elif [[ ${push_live} -eq 1 ]]
    then
        echo "Pushing to live..."
        version=$(twine upload dist/* |grep 'Uploading'| awk '{print $2}' | awk -F'.tar.gz' '{print $1}'|awk -F'-' '{print $3}')
        if [[ ${PIPESTATUS[0]} -ne 0 ]]
        then
            fail "Failed to release to pypi"
        fi

        echo "Released version: ${version} to pypi.python.org"
    fi
}


function run_build() {
    export args=${1}
    set_log_uri ''
    pending_status "Running CI..."
    setup
    run_tox_tests
    release_build
}

